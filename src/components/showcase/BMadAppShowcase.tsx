'use client'

import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card'
import { Button } from '../ui/button'
import { 
  Monitor, Smartphone, Tablet, Code, Download, ExternalLink, Play, Github, 
  Globe, Sparkles, FileText, Users, CheckCircle, TrendingUp, Target, 
  Building, Palette, TestTube, BarChart3, Clock, Star, Award
} from 'lucide-react'

interface BMadAppResult {
  appName: string
  framework: string
  features: string[]
  deploymentUrl: string
  codeRepository: string
  artifacts: Record<string, string>
  metrics: {
    totalTime: number
    linesOfCode: number
    testCoverage: number
    performanceScore: number
  }
}

interface BMadAppShowcaseProps {
  result: BMadAppResult
  onNewProject: () => void
}

export function BMadAppShowcase({ result, onNewProject }: BMadAppShowcaseProps) {
  const [selectedView, setSelectedView] = useState<'desktop' | 'tablet' | 'mobile'>('desktop')
  const [selectedTab, setSelectedTab] = useState<'preview' | 'artifacts' | 'metrics' | 'code'>('preview')

  const viewSizes = {
    desktop: { width: '100%', height: '600px' },
    tablet: { width: '768px', height: '600px' },
    mobile: { width: '375px', height: '600px' }
  }

  const [currentScreen, setCurrentScreen] = useState('dashboard')

  const artifactIcons: Record<string, any> = {
    'Project Brief': TrendingUp,
    'Product Requirements': Target,
    'UI/UX Design': Palette,
    'System Architecture': Building,
    'User Stories': FileText,
    'Source Code': Code,
    'Test Results': TestTube
  }

  const mockGeneratedCode = `// Generated BMad Application
// Project: ${result.appName}
// Framework: ${result.framework}
// Generated by BMad-Method AI Agents

import React from 'react'
import { BrowserRouter, Routes, Route } from 'react-router-dom'
import { AuthProvider } from './contexts/AuthContext'
import { Dashboard } from './pages/Dashboard'
import { Profile } from './pages/Profile'
import { Settings } from './pages/Settings'
import './styles/globals.css'

// Auto-generated with BMad methodology
// - Complete SDLC followed by specialized agents
// - Business analysis → Product requirements → UX design
// - System architecture → Story creation → Development → QA

export default function App() {
  return (
    <AuthProvider>
      <BrowserRouter>
        <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800">
          <Routes>
            <Route path="/" element={<Dashboard />} />
            <Route path="/profile" element={<Profile />} />
            <Route path="/settings" element={<Settings />} />
          </Routes>
        </div>
      </BrowserRouter>
    </AuthProvider>
  )
}

// Features implemented:
${result.features.map(feature => `// - ${feature}`).join('\n')}

// Artifacts generated:
${Object.keys(result.artifacts).map(artifact => `// - ${artifact}`).join('\n')}

// Quality metrics:
// - Lines of Code: ${result.metrics.linesOfCode}
// - Test Coverage: ${result.metrics.testCoverage}%
// - Performance Score: ${result.metrics.performanceScore}/100
// - Total Development Time: ${Math.floor(result.metrics.totalTime / 60)}min`

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center space-y-4">
        <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-viby rounded-full mb-4">
          <Award className="h-8 w-8 text-white" />
        </div>
        <h2 className="text-3xl font-bold gradient-text">BMad Application Complete!</h2>
        <p className="text-slate-300 text-lg">
          <span className="text-white font-semibold">{result.appName}</span> has been successfully built using the BMad-Method
        </p>
      </div>

      {/* Key Metrics Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card className="glass-card text-center">
          <CardContent className="p-6">
            <div className="text-3xl font-bold gradient-text mb-2">
              {Math.floor(result.metrics.totalTime / 60)}min
            </div>
            <div className="text-slate-400">Development Time</div>
          </CardContent>
        </Card>
        <Card className="glass-card text-center">
          <CardContent className="p-6">
            <div className="text-3xl font-bold gradient-text mb-2">
              {result.metrics.linesOfCode.toLocaleString()}
            </div>
            <div className="text-slate-400">Lines of Code</div>
          </CardContent>
        </Card>
        <Card className="glass-card text-center">
          <CardContent className="p-6">
            <div className="text-3xl font-bold gradient-text mb-2">
              {result.metrics.testCoverage}%
            </div>
            <div className="text-slate-400">Test Coverage</div>
          </CardContent>
        </Card>
        <Card className="glass-card text-center">
          <CardContent className="p-6">
            <div className="text-3xl font-bold gradient-text mb-2">
              {result.metrics.performanceScore}/100
            </div>
            <div className="text-slate-400">Performance</div>
          </CardContent>
        </Card>
      </div>

      {/* Navigation Tabs */}
      <div className="flex flex-wrap gap-2">
        {[
          { id: 'preview', name: 'Live Preview', icon: Monitor },
          { id: 'artifacts', name: 'BMad Artifacts', icon: FileText },
          { id: 'metrics', name: 'Quality Metrics', icon: BarChart3 },
          { id: 'code', name: 'Generated Code', icon: Code }
        ].map((tab) => (
          <Button
            key={tab.id}
            variant={selectedTab === tab.id ? "default" : "outline"}
            onClick={() => setSelectedTab(tab.id as any)}
            className={selectedTab === tab.id ? "gradient-button" : "glass-button"}
          >
            <tab.icon className="h-4 w-4 mr-2" />
            {tab.name}
          </Button>
        ))}
      </div>

      {/* Tab Content */}
      {selectedTab === 'preview' && (
        <Card className="glass-card">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-white flex items-center">
                <Monitor className="h-5 w-5 mr-2" />
                Live Application Preview
              </CardTitle>
              <div className="flex space-x-2">
                {[
                  { id: 'desktop', icon: Monitor },
                  { id: 'tablet', icon: Tablet },
                  { id: 'mobile', icon: Smartphone }
                ].map((device) => (
                  <Button
                    key={device.id}
                    variant={selectedView === device.id ? "default" : "outline"}
                    size="sm"
                    onClick={() => setSelectedView(device.id as any)}
                    className={selectedView === device.id ? "gradient-button" : "glass-button"}
                  >
                    <device.icon className="h-4 w-4" />
                  </Button>
                ))}
              </div>
            </div>
          </CardHeader>
          <CardContent>
            {/* Screen Navigation */}
            <div className="flex space-x-2 mb-4">
              {['dashboard', 'profile', 'settings'].map((screen) => (
                <Button
                  key={screen}
                  variant={currentScreen === screen ? "default" : "outline"}
                  size="sm"
                  onClick={() => setCurrentScreen(screen)}
                  className={currentScreen === screen ? "gradient-button" : "glass-button"}
                >
                  {screen.charAt(0).toUpperCase() + screen.slice(1)}
                </Button>
              ))}
            </div>

            {/* App Preview */}
            <div className="flex justify-center">
              <div 
                className="bg-white rounded-lg shadow-2xl overflow-hidden transition-all duration-300"
                style={{ 
                  width: viewSizes[selectedView].width,
                  maxWidth: '100%',
                  height: viewSizes[selectedView].height
                }}
              >
                {/* Mock App Content */}
                <div className="h-full bg-gradient-to-br from-slate-50 to-slate-100 flex flex-col">
                  {/* App Header */}
                  <div className="bg-white border-b px-6 py-4 flex items-center justify-between">
                    <h3 className="text-lg font-semibold text-slate-800">{result.appName}</h3>
                    <div className="flex items-center space-x-2">
                      <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                        Production Ready
                      </span>
                      <div className="flex space-x-1">
                        <div className="w-3 h-3 bg-red-400 rounded-full"></div>
                        <div className="w-3 h-3 bg-yellow-400 rounded-full"></div>
                        <div className="w-3 h-3 bg-green-400 rounded-full"></div>
                      </div>
                    </div>
                  </div>
                  
                  {/* Generated App Content */}
                  <div className="flex-1 p-6">
                    {currentScreen === 'dashboard' && (
                      <div className="space-y-6">
                        <div className="flex items-center justify-between">
                          <h1 className="text-2xl font-bold text-slate-800">Analytics Dashboard</h1>
                          <span className="text-sm text-slate-600">BMad Generated</span>
                        </div>
                        
                        {/* Stats Cards */}
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          {[
                            { label: 'Active Users', value: '12,543', trend: '+12%' },
                            { label: 'Revenue', value: '$45,210', trend: '+8%' },
                            { label: 'Performance', value: '98.5%', trend: '+2%' }
                          ].map((stat, i) => (
                            <div key={i} className="bg-white p-4 rounded-lg shadow border">
                              <div className="text-sm text-slate-600 mb-1">{stat.label}</div>
                              <div className="text-2xl font-bold text-slate-800">{stat.value}</div>
                              <div className="text-sm text-green-600">{stat.trend}</div>
                            </div>
                          ))}
                        </div>
                        
                        {/* Chart Placeholder */}
                        <div className="bg-white p-6 rounded-lg shadow border">
                          <h3 className="text-lg font-semibold text-slate-800 mb-4">Usage Analytics</h3>
                          <div className="h-32 bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 rounded opacity-20"></div>
                        </div>
                      </div>
                    )}
                    
                    {currentScreen === 'profile' && (
                      <div className="space-y-6">
                        <div className="flex items-center space-x-4">
                          <div className="w-16 h-16 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full"></div>
                          <div>
                            <h2 className="text-xl font-bold text-slate-800">User Profile</h2>
                            <p className="text-slate-600">Manage your account settings</p>
                          </div>
                        </div>
                        
                        <div className="bg-white p-6 rounded-lg shadow border">
                          <h3 className="text-lg font-semibold text-slate-800 mb-4">Personal Information</h3>
                          <div className="space-y-4">
                            {[
                              { label: 'Full Name', value: 'John Doe' },
                              { label: 'Email', value: 'john@example.com' },
                              { label: 'Role', value: 'Product Manager' }
                            ].map((field, i) => (
                              <div key={i} className="flex justify-between items-center">
                                <span className="text-slate-600">{field.label}</span>
                                <span className="text-slate-800 font-medium">{field.value}</span>
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    )}
                    
                    {currentScreen === 'settings' && (
                      <div className="space-y-6">
                        <h1 className="text-2xl font-bold text-slate-800">Application Settings</h1>
                        
                        <div className="bg-white p-6 rounded-lg shadow border">
                          <h3 className="text-lg font-semibold text-slate-800 mb-4">Preferences</h3>
                          <div className="space-y-4">
                            {[
                              'Email Notifications',
                              'Dark Mode',
                              'Auto-save',
                              'Two-factor Authentication'
                            ].map((setting, i) => (
                              <div key={i} className="flex justify-between items-center">
                                <span className="text-slate-600">{setting}</span>
                                <div className="w-12 h-6 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full"></div>
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* BMad Artifacts Tab */}
      {selectedTab === 'artifacts' && (
        <Card className="glass-card">
          <CardHeader>
            <CardTitle className="text-white flex items-center">
              <FileText className="h-5 w-5 mr-2" />
              BMad-Method Generated Artifacts
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {Object.entries(result.artifacts).map(([artifact, description]) => {
                const Icon = artifactIcons[artifact] || FileText
                return (
                  <div key={artifact} className="bg-white/5 p-4 rounded-lg border border-white/10">
                    <div className="flex items-center space-x-3 mb-3">
                      <div className="p-2 bg-gradient-viby rounded-lg">
                        <Icon className="h-5 w-5 text-white" />
                      </div>
                      <h3 className="text-white font-medium">{artifact}</h3>
                    </div>
                    <p className="text-slate-300 text-sm mb-3">{description}</p>
                    <div className="flex space-x-2">
                      <Button size="sm" variant="outline" className="glass-button">
                        <FileText className="h-3 w-3 mr-1" />
                        View
                      </Button>
                      <Button size="sm" variant="outline" className="glass-button">
                        <Download className="h-3 w-3 mr-1" />
                        Download
                      </Button>
                    </div>
                  </div>
                )
              })}
            </div>
            
            <div className="mt-6 p-4 bg-blue-500/10 rounded-lg border border-blue-500/20">
              <h4 className="text-white font-medium mb-2 flex items-center">
                <Sparkles className="h-4 w-4 mr-2" />
                BMad-Method Workflow Completed
              </h4>
              <p className="text-slate-300 text-sm">
                All artifacts have been generated following the complete BMad methodology. Each document 
                has been created by specialized AI agents with domain expertise, ensuring comprehensive 
                coverage and professional quality.
              </p>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Quality Metrics Tab */}
      {selectedTab === 'metrics' && (
        <Card className="glass-card">
          <CardHeader>
            <CardTitle className="text-white flex items-center">
              <BarChart3 className="h-5 w-5 mr-2" />
              Quality Metrics & Performance
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Development Metrics */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-white">Development Metrics</h3>
                {[
                  { label: 'Code Quality Score', value: 95, color: 'from-green-500 to-emerald-500' },
                  { label: 'Architecture Compliance', value: 98, color: 'from-blue-500 to-cyan-500' },
                  { label: 'Security Score', value: 92, color: 'from-purple-500 to-pink-500' },
                  { label: 'Documentation Coverage', value: 89, color: 'from-orange-500 to-red-500' }
                ].map((metric) => (
                  <div key={metric.label} className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-slate-300">{metric.label}</span>
                      <span className="text-white font-medium">{metric.value}%</span>
                    </div>
                    <div className="w-full bg-white/10 rounded-full h-2">
                      <div 
                        className={`bg-gradient-to-r ${metric.color} h-2 rounded-full transition-all duration-1000`}
                        style={{ width: `${metric.value}%` }}
                      />
                    </div>
                  </div>
                ))}
              </div>

              {/* Performance Metrics */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-white">Performance Metrics</h3>
                {[
                  { label: 'Page Load Speed', value: '1.2s', icon: Clock },
                  { label: 'Core Web Vitals', value: 'Excellent', icon: Star },
                  { label: 'Accessibility Score', value: 'AA+', icon: Users },
                  { label: 'SEO Optimization', value: '94/100', icon: TrendingUp }
                ].map((metric) => (
                  <div key={metric.label} className="flex items-center justify-between p-3 bg-white/5 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <metric.icon className="h-5 w-5 text-slate-400" />
                      <span className="text-slate-300">{metric.label}</span>
                    </div>
                    <span className="text-white font-medium">{metric.value}</span>
                  </div>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Generated Code Tab */}
      {selectedTab === 'code' && (
        <Card className="glass-card">
          <CardHeader>
            <CardTitle className="text-white flex items-center">
              <Code className="h-5 w-5 mr-2" />
              Generated Source Code
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="bg-slate-900 rounded-lg p-4 overflow-x-auto">
              <pre className="text-slate-300 text-sm">
                <code>{mockGeneratedCode}</code>
              </pre>
            </div>
            <div className="mt-4 flex flex-wrap gap-4">
              <Button className="gradient-button">
                <Download className="h-4 w-4 mr-2" />
                Download Full Source
              </Button>
              <Button variant="outline" className="glass-button">
                <Github className="h-4 w-4 mr-2" />
                View Repository
              </Button>
              <Button variant="outline" className="glass-button">
                <ExternalLink className="h-4 w-4 mr-2" />
                Deploy to Vercel
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row gap-4">
        <Button className="gradient-button flex-1" onClick={() => window.open(result.deploymentUrl, '_blank')}>
          <ExternalLink className="h-4 w-4 mr-2" />
          Open Live Application
        </Button>
        <Button variant="outline" className="glass-button flex-1" onClick={() => window.open(result.codeRepository, '_blank')}>
          <Github className="h-4 w-4 mr-2" />
          View Source Code
        </Button>
        <Button variant="outline" className="glass-button flex-1">
          <Download className="h-4 w-4 mr-2" />
          Download Project Package
        </Button>
        <Button 
          variant="outline" 
          className="glass-button flex-1"
          onClick={onNewProject}
        >
          <Sparkles className="h-4 w-4 mr-2" />
          Create New Project
        </Button>
      </div>
    </div>
  )
}